@using System.Text

<div class="canvas-container" space>

  @{
    var imageT = new List<string>();
    var imageB = new List<string>();
    var imageL = new List<string>();
    var imageR = new List<string>();
    var imageVX = new List<string>();
    var imageVY = new List<string>();
    var positionT = new List<string>();
    var positionB = new List<string>();
    var positionL = new List<string>();
    var positionR = new List<string>();
    var positionVX = new List<string>();
    var positionVY = new List<string>();
    var grid = "linear-gradient(#DDD,#DDD)";
  }

  <div class="canvas-scale canvas-scale-T">

    @if (Cursor is not null)
    {
      <span class="canvas-label canvas-marker" style="left: @(Cursor.X)px"><b>@Cursor.ValueX</b></span>
    }

    @if (Composer?.Engine is null)
    {
      <span class="canvas-label" style="left: 25%"><b>25%</b></span>
      <span class="canvas-label" style="left: 50%"><b>50%</b></span>
      <span class="canvas-label" style="left: 75%"><b>75%</b></span>
    }
    else
    {
      @foreach (var o in GetIndexEnumerator())
      {
        <span class="canvas-label" style="left: @(o.Index)px"><b>@o.Value</b></span>
      }
    }

  </div>

  <div class="canvas-scale canvas-scale-B">

    @if (Cursor is not null)
    {
      <span class="canvas-label canvas-marker" style="left: @(Cursor.X)px"><b>@Cursor.ValueX</b></span>
    }

    @if (Composer?.Engine is null)
    {
      <span class="canvas-label" style="left: 25%"><b>25%</b></span>
      <span class="canvas-label" style="left: 50%"><b>50%</b></span>
      <span class="canvas-label" style="left: 75%"><b>75%</b></span>
    }
    else
    {
      @foreach (var o in GetIndexEnumerator())
      {
        imageT.Add(grid);
        imageB.Add(grid);
        imageVX.Add(grid);
        positionT.Add($"{ o.Index }px 100%");
        positionB.Add($"{ o.Index }px 0");
        positionVX.Add($"{ o.Index }px 100%");

        <span class="canvas-label" style="left: @(o.Index)px"><b>@o.Value</b></span>
      }
    }

  </div>

  <div class="canvas-scale canvas-scale-L">

    @if (Cursor is not null)
    {
      <span class="canvas-label canvas-marker" style="top: @(Cursor.Y)px"><b>@Cursor.ValueY</b></span>
    }

    @if (Composer?.Engine is null)
    {
      <span class="canvas-label" style="top: 25%"><b>25%</b></span>
      <span class="canvas-label" style="top: 50%"><b>50%</b></span>
      <span class="canvas-label" style="top: 75%"><b>75%</b></span>
    }
    else
    {
      @foreach (var o in GetValueEnumerator())
      {
        <span class="canvas-label" style="top: @(o.Index)px"><b>@o.Value</b></span>
      }
    }

  </div>

  <div class="canvas-scale canvas-scale-R">

    @if (Cursor is not null)
    {
      <span class="canvas-label canvas-marker" style="top: @(Cursor.Y)px"><b>@Cursor.ValueY</b></span>
    }

    @if (Composer?.Engine is null)
    {
      <span class="canvas-label" style="top: 25%"><b>25%</b></span>
      <span class="canvas-label" style="top: 50%"><b>50%</b></span>
      <span class="canvas-label" style="top: 75%"><b>75%</b></span>
    }
    else
    {
      @foreach (var o in GetValueEnumerator())
      {
        imageL.Add(grid);
        imageR.Add(grid);
        imageVY.Add(grid);
        positionL.Add($"100% { o.Index }px");
        positionR.Add($"0 { o.Index }px");
        positionVY.Add($"100% { o.Index }px");

        <span class="canvas-label" style="top: @(o.Index)px"><b>@o.Value</b></span>
      }
    }

  </div>

  <div class="canvas-view"
    @onwheel="OnWheel"
    @onmousewheel="OnWheel"
    @onmousemove="OnMouseMove"
    @onmouseout="OnMouseLeave"
    @onmousedown="OnMouseDown">

    @if (Cursor is not null)
    {
      <div class="canvas-cross" style="background-position: @(Cursor.X)px 100%, 100% @(Cursor.Y)px"></div>
    }

    <img @ref="CanvasContainer" src="@Server?.Source" />

  </div>

</div>

<style type="text/css">

  .canvas-container[space] .canvas-scale-T {
    background-image: @(string.Join(",", imageT));
    background-position: @(string.Join(",", positionT));
  }

  .canvas-container[space] .canvas-scale-B {
    background-image: @(string.Join(",", imageB));
    background-position: @(string.Join(",", positionB));
  }

  .canvas-container[space] .canvas-scale-L {
    background-image: @(string.Join(",", imageL));
    background-position: @(string.Join(",", positionL));
  }

  .canvas-container[space] .canvas-scale-R {
    background-image: @(string.Join(",", imageR));
    background-position: @(string.Join(",", positionR));
  }

  .canvas-container[space] .canvas-view {
    background-image: @(string.Join(",", imageVX));
    background-position: @(string.Join(",", positionVX));
  }

  .canvas-container[space] .canvas-view img {
    background-image: @(string.Join(",", imageVY));
    background-position: @(string.Join(",", positionVY));
  }

</style>
