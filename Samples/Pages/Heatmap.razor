@page "/map"

@using Canvas.Core
@using Canvas.Core.ComposerSpace
@using Canvas.Core.EngineSpace
@using Canvas.Core.ModelSpace
@using Canvas.Core.ShapeSpace
@using Canvas.Core.ServiceSpace
@using ScriptContainer

<div class="demo">
  <CanvasView @ref="ViewControl"></CanvasView>
</div>

<style type="text/css">
  .demo {
    display: flex;
    flex-grow: 1;
    height: 100%;
  }
</style>

@code
{
  public CanvasView ViewControl { get; set; }

  protected override async Task OnAfterRenderAsync(bool setup)
  {
    if (setup)
    {
      var min = 0;
      var max = 100;
      var generator = new Random();
      var colorService = new ColorService { Min = min, Max = max };
      var points = Enumerable.Range(min, max).Select(i => new ColorMapShape
      {
        Points = Enumerable
          .Range(min, max)
          .Select(o => new ColorMapShape
          {
            X = i,
            Y = o,
            Z = o,
            Component = new ComponentModel
            {
              Color = colorService.GetColor(o)
            }
          } as IShape)
          .OrderBy(o => generator.Next())
          .ToList()

      } as IShape).ToList();

      var composer = new Composer
      {
        Name = "Demo",
        Items = points
      };

      await ViewControl.Create<CanvasEngine>(engine => composer);

      composer.Update();
    }

    await base.OnAfterRenderAsync(setup);
  }
}
