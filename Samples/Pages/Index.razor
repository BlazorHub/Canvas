@page "/demo"

@using Canvas.Core
@using Canvas.Core.EngineSpace
@using Canvas.Core.ModelSpace
@using ScriptContainer

<CanvasWebView @ref="ViewControl"></CanvasWebView>

@code
{
  public CanvasWebView ViewControl { get; set; }

  protected override async Task OnAfterRenderAsync(bool setup)
  {
    if (setup)
    {
      ViewControl.OnSize.Subscribe(message => OnCreate(nameof(ViewControl), message));
      ViewControl.OnCreate.Subscribe(message => OnCreate(nameof(ViewControl), message));
    }

    await base.OnAfterRenderAsync(setup);
  }

  protected void OnCreate(string name, ViewMessage message)
  {
    if (message is null)
    {
      return;
    }

    var generator = new Random();
    var points = Enumerable.Range(1, 100).Select(i => new BarGroupModel
    {
      Index = i,
      Value = new Model { ["Point"] = generator.Next(-5000, 5000) }
    } as IPointModel);

    var composer = new Composer
    {
      Name = name,
      Points = points.ToList(),
      Engine = new CanvasEngine(message.X, message.Y)
    };

    if (message?.View?.Composer is not null)
    {
      composer.Points = message.View.Composer.Points;
      composer.IndexDomain = message.View.Composer.IndexDomain;
      composer.ValueDomain = message.View.Composer.ValueDomain;
      message.View.Composer.Dispose();
    }

    ViewControl.Composer = composer;
    ViewControl.Update();
    ViewControl.Update();
  }
}
