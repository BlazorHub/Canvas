@page "/"
@page "/single"

@using Canvas.Core
@using Canvas.Core.ComposerSpace
@using Canvas.Core.EnumSpace
@using Canvas.Core.ModelSpace
@using Canvas.Core.EngineSpace

<div class="combo-container">
  <div class="view grid"><GridView @ref="Grid"></GridView></div>
  <div class="view screen"><ScreenView @ref="View"></ScreenView></div>
  <div class="view T"><IndexScaleView View="PositionEnum.T" @ref="T"></IndexScaleView></div>
  <div class="view B"><IndexScaleView View="PositionEnum.B" @ref="B"></IndexScaleView></div>
  <div class="view L"><ValueScaleView View="PositionEnum.L" @ref="L"></ValueScaleView></div>
  <div class="view R"><ValueScaleView View="PositionEnum.R" @ref="R"></ValueScaleView></div>
</div>

<style type="text/css">

  .combo-container {
      width: 100%;
      height: 100%;
      display: grid;
      grid-template-rows: 2rem 1fr 2rem;
      grid-template-columns: 4rem 1fr 4rem;
      grid-template-areas:
          ". T ."
          "L V R"
          ". B .";
  }

  .T { grid-area: T; }
  .B { grid-area: B; }
  .L { grid-area: L; }
  .R { grid-area: R; }
  .view { display: flex; flex-grow: 1; }
  .grid { grid-area: V; z-index: 5; }
  .screen { grid-area: V; z-index: 10; }

</style>

@code
{
  public GridView Grid { get; set; }
  public ScreenView View { get; set; }
  public IndexScaleView T { get; set; }
  public IndexScaleView B { get; set; }
  public ValueScaleView L { get; set; }
  public ValueScaleView R { get; set; }

  protected override async Task OnAfterRenderAsync(bool setup)
  {
    if (setup)
    {
      var generator = new Random();
      var points = Enumerable.Range(1, 1000).Select(i => new BarItemModel { X = i, Y = generator.Next(-5000, 5000) } as IItemModel).ToList();
      var composer = new Composer { Name = "Demo", Items = points };

      await T.Create<CanvasEngine>(engine => composer);
      await B.Create<CanvasEngine>(engine => composer);
      await L.Create<CanvasEngine>(engine => composer);
      await R.Create<CanvasEngine>(engine => composer);
      await Grid.Create<CanvasEngine>(engine => composer);
      await View.Create<CanvasEngine>(engine => composer);

      await composer.Update();
    }

    await base.OnAfterRenderAsync(setup);
  }
}
